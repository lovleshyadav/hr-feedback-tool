{"version":3,"sources":["actions/index.js","components/Login.js","components/QueryList.js","components/QueryListTable.js","components/NavBar.js","components/SendQuery.js","components/QueryChatForm.js","components/ChatResponse.js","components/QueryChat.js","components/QueryChatWindow.js","components/GetHash.js","App.js","serviceWorker.js","reducers/feedbackReducer.js","reducers/isLoggedReducer.js","reducers/selectedFeedbackReducer.js","reducers/userHashReducer.js","reducers/index.js","store.js","index.js"],"names":["getUserFeedbacks","feedbacks","type","payload","selectFeedback","id","selectedFeedback","addUserHash","userHash","isLoggedIn","Login","handleLogin","loggedIn","useState","email","setEmail","password","setPassword","push","to","className","onSubmit","bind","this","placeholder","value","onChange","e","target","disabled","length","QueryList","data","props","querylist","slice","reverse","icons","Filter","aria-hidden","aria-describedby","title","columns","field","options","exportButton","actionsColumnIndex","localization","pagination","labelDisplayedRows","toolbar","nRowsSelected","header","actions","body","emptyDataSourceMessage","filterRow","filterTooltip","icon","tooltip","onClick","event","rowData","alert","name","onRowClick","a","components","Action","pathname","queryresponse","response","query","Button","color","variant","style","textTransform","padding","textAlign","marginRight","marginBottom","marginTop","borderRadius","backgroundColor","fontSize","boxShadow","cursor","border","size","Component","connect","state","QueryListTable","logoutUser","toggleImportant","toggleRead","NavBar","display","activeStyle","background","render","redirect","SendQuery","handleSendQuery","redirectUser","subject","setSubject","setQuery","location","setLocation","date","setDate","realusername","setRealusername","for","handleLocationChange","QueryChatForm","addUserresponse","useSelector","ChatResponse","getStyleForChatWrapper","user","justifyContent","getStyleForChat","float","flexDirection","console","log","time","QueryChat","map","QueryChatWindow","obj","find","o","GetHash","App","callBackendAPI","fetch","json","status","Error","message","setState","queryItem","important","impBtnValue","read","readBtnValue","sha256","method","headers","JSON","stringify","then","result","preventDefault","queryId","path","exact","component","Boolean","window","hostname","match","feedbackReducer","action","isLoggedReducer","selectedFeedbackReducer","userHashReducer","allReducers","combineReducers","isLogged","loggedReducer","currentUserHash","persistedState","serializedState","localStorage","getItem","parse","loadFromLocalStorage","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","setItem","saveToLocalStorage","getState","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ef44ad6f.chunk.js","sourcesContent":["export const getUserFeedbacks = (feedbacks) => {\n    return {\n        type: 'GET_USER_FEEDBACK',\n        payload: feedbacks\n    }\n};\n\nexport const updateUserResponse = () => {\n    return {\n        type: 'UPDATE_USER_RESPONSE',\n        payload: []\n    };\n};\n\nexport const selectFeedback = (id) => {\n    return {\n        type: 'SELECTED_FEEDBACK',\n        selectedFeedback: id\n    };\n};\n\nexport const addUserHash = (userHash) => {\n    return {\n        type: 'ADD_USER_HASH',\n        userHash: userHash\n    };\n};\n\nexport const isLoggedIn = () => {\n    return {\n        type: 'SIGN_IN'\n    };\n};\n\n\nexport const updateSeletedFeedback = () => {\n    return {\n        type: 'UPDATE_SELECTED_FEEDBACK',\n        payload: []\n    };\n};","import React, { useState } from \"react\";\nimport { Redirect } from 'react-router-dom';\n\nfunction Login({handleLogin,loggedIn}) {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    function validateForm() {\n        return email.length > 0 && password.length > 0;\n    }\n\n    if (loggedIn)\n        return(<Redirect push to=\"/QueryListTable\"/>);\n\n\n  return (\n    <div className=\"login\">\n        <div className=\"loginFormWrapper\">\n            <div className=\"loginFormTitle\">Login <span className=\"loginHelp\">?</span></div>\n            <div className=\"loginForm\">\n                <form onSubmit={handleLogin.bind(this, email, password)}>\n                    <div className=\"field\">\n                        <span>Username:</span>\n                        <input type=\"text\" id=\"username\" className=\"input\" placeholder=\"\" value={email} onChange={e => setEmail(e.target.value)} />\n                    </div>\n                    <div className=\"field\">\n                        <span>Password:</span>\n                        <input type=\"password\" id=\"password\" className=\"input\" placeholder=\"\" value={password} onChange={e => setPassword(e.target.value)} />\n                    </div>\n                    <div className=\"loginBtnWrapper\">\n                        <button className=\"loginBtn\" disabled={!validateForm()} >Login</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n        <div className=\"loginImg\"></div>\n        <div className=\"loginDisclaimer\">\n            Disclaimer: <p>we do not store any information provided here and so we will not be able to retrive your account in case you forget your username and password so please keep it stored somewhere</p>\n        </div>\n        \n    </div>\n  );\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport MaterialTable from 'material-table'\nimport { Link } from 'react-router-dom';\nimport { Button} from 'react-bootstrap';\nimport {connect} from \"react-redux\";\nimport {selectFeedback} from \"../actions\";\n\nclass QueryList extends Component {\n\n    render() {\n        //console.log(this.props.querylist);\n        const data = this.props.querylist.slice(0).reverse();\n        // console.log(data);\n        const columns = [\n            {\n                title: 'Date Received',\n                field: 'date'\n            },\n            {\n                title: 'Incident Date',\n                field: 'incidentDate'\n            },\n            {\n                title: 'Location',\n                field: 'location'\n                \n            },\n            {\n                title: 'Subject',\n                field: 'querySubject'\n            },\n            {\n                title: 'Message',\n                field: 'queryBody'\n            },\n            {\n                title: 'Sender Name',\n                field: 'userName'\n            }\n        ];\n\n        return (\n\n        <MaterialTable\n            icons={{ Filter: () => <span className=\"material-icons MuiIcon-root MuiIcon-fontSizeSmall\" aria-hidden=\"true\" aria-describedby=\"mui-88980\">search</span> }}\n            title=\"My Query List\"\n            data={data}\n            columns={columns}\n            options={{\n                // filtering:true,\n                exportButton: true,\n                // grouping: true,\n                actionsColumnIndex: -1\n            }}\n            localization={{\n                // grouping: {\n                //     placeholder: 'Hi',\n                //     groupedBy: 'bye' \n                // },\n                pagination: {\n                    labelDisplayedRows: '{from}-{to} of {count}'\n                },\n                toolbar: {\n                    nRowsSelected: '{0} row(s) selected'\n                },\n                header: {\n                    actions: ''\n                },\n                body: {\n                    emptyDataSourceMessage: 'No records to display',\n                    filterRow: {\n                        filterTooltip: 'search'\n                    }\n                }\n            }}\n            actions={[\n                {\n                  icon: 'save',\n                  tooltip: 'Save User',\n                  onClick: (event, rowData) => alert(\"You saved \" + rowData.name)\n                }\n              ]}\n            onRowClick={async (event, rowData) => {\n                await this.props.selectFeedback(rowData.id);\n            }}\n            components={{\n                Action: props => (\n                    <Link to={{\n                        pathname:'/queryChatWindow',\n                        queryresponse:{\n                            response: this.props.query\n                        },\n                        userHash: this.props.userHash\n                    }} >\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    style={{textTransform: 'none',\n                        color: 'white',\n                        padding: '8px 14px',\n                        textAlign: 'center',\n                        marginRight: '10px',\n                        marginBottom: '15px',\n                        marginTop: '10px',\n                        borderRadius: '10px',\n                        backgroundColor: '#144c92',\n                        fontSize: '13px',\n                        boxShadow: '0 0 57px rgba(0,0,0,0.13)',\n                        cursor: 'pointer',\n                        border: 'none'}}\n                    size=\"small\"\n                  >Go To Conversation\n                  </Button>\n                  </Link>\n                ),\n              }}\n        />\n        );\n    }\n}\n\nQueryList.propTypes = {\n    querylist: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => ({\n    selectedFeedback: state.selectedFeedback\n});\n\nconst mapDispatchToProps = () => {\n    return {\n        selectFeedback\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps()\n)(QueryList);\n","import React, { Component } from 'react'\nimport QueryList from './QueryList';\nimport NavBar from './NavBar';\nimport { Link } from 'react-router-dom';\n\nclass QueryListTable extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"loginBtnAndGetHashWrapper\">\n                    <Link to=\"/gethash\" className=\"getHash\">Get Hash</Link> \n                    <Link onClick={async () => {await this.props.logoutUser()}} className=\"logoutBtn\" to={{\n                        pathname:'/login'\n                    }} >Log out!</Link>\n                </div>\n\n\n                <NavBar userHash={this.props.userHash}/>\n            <div className=\"queryList\">\n                <QueryList querylist={this.props.querylist} userHash={this.props.userHash} toggleImportant={this.props.toggleImportant} toggleRead={this.props.toggleRead}/>\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default QueryListTable;\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport QueryListTable from './QueryListTable';\nimport SendQuery from './SendQuery';\n\nfunction NavBar(userHash) {\n    return (\n        <div className=\"NavBarWrapper\">\n            <div className=\"NavBar\" style={{display: (userHash.userHash === \"d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892\")?\"none\":\"inline-flex\"}}>\n                <NavLink className=\"NavItems\"  to=\"/sendquery\" activeStyle={{color: '#fff', background: '#3c72a7'}} render={props => (<SendQuery redirect={false}/>)}>Send Query</NavLink>\n                <NavLink className=\"NavItems\" to='/QueryListTable' activeStyle={{color: '#fff', background: '#3c72a7'}} render={props => (<QueryListTable {...props} querylist={this.state.querylist}/>)}>My Query List</NavLink>\n            </div>\n        </div>\n    )\n}\n\nexport default NavBar;","import React, { useState } from \"react\";\nimport NavBar from './NavBar';\nimport { Link, Redirect } from 'react-router-dom';\n\nfunction SendQuery({handleSendQuery, logoutUser, userHash, redirect, redirectUser}) {\n\n    const [subject, setSubject] = useState(\"\");\n    const [query, setQuery] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n    const [date, setDate] = useState(\"\"); //incident date\n    const [realusername, setRealusername] = useState(\"\");\n\n    const handleLocationChange = (location) => {\n        setLocation(location);\n    }\n\n    function validateForm() {\n        return subject.length > 0 && query.length > 0 && location.length > 0 && date.length > 0;\n    }\n\n\n    if(redirect){\n        redirectUser();\n        return(<Redirect to='/QueryListTable'  />)\n    }\n    else{\n        return (\n            <div>\n                <Link onClick={async () => {await logoutUser()}} className=\"logoutBtn\" to={{pathname:'/login'}}>Log out!</Link>\n                <NavBar userHash={userHash}/>\n                <div className=\"SendQuery\">\n                    <div className=\"sendQueryTitle\">Send Your Query!</div>\n                    <div className=\"query\">\n                        <div className=\"formWrapper\">\n                            <form onSubmit={handleSendQuery.bind(this, date, subject, query, location, realusername)}>\n                                <div className=\"field\">\n                                    <label for=\"incidentDate\">When did the incident occur?<span className=\"impStar\">*</span> </label>\n                                    <input type=\"date\" id=\"incidentDate\" name=\"incidentDate\" value={date} onChange={e => setDate(e.target.value)}/>\n                                </div>\n                                <div className=\"field\">\n                                    <input type=\"text\" id=\"subject\" className=\"input\" placeholder=\"Subject (mandatory)\" value={subject} onChange={e => setSubject(e.target.value)} />\n                                </div>\n                                <div className=\"field locationDropDown\">\n                                    <label>Location:<span className=\"impStar\">*</span> </label>\n                                    <select name=\"location\" value={location} onChange={event => handleLocationChange(event.target.value)}>\n                                        <option id=\"blank\"></option>\n                                        <option id=\"NYC\">NYC</option>\n                                        <option id=\"LA\">LA</option>\n                                        <option id=\"Tel Aviv\">Tel Aviv</option>\n                                        <option id=\"Chicago\">Chicago</option>\n                                        <option id=\"London\">London</option>\n                                        <option id=\"Madrid\">Madrid</option>\n                                        <option id=\"Paris\">Paris</option>\n                                        <option id=\"Berlin\">Berlin</option>\n                                        <option id=\"Mexico City\">Mexico City</option>\n                                        <option id=\"São Paulo\">São Paulo</option>\n                                        <option id=\"Seol\">Seol</option>\n                                        <option id=\"Sydney\">Sydney</option>\n                                        <option id=\"Shanghai\">Shanghai</option>\n                                        <option id=\"Tokyo\">Tokyo</option>\n                                        <option id=\"Beijing\">Beijing</option>\n                                        <option id=\"New Delhi\">New Delhi</option>\n                                        <option id=\"Bangkok\">Bangkok</option>\n                                        <option id=\"Istanbul\">Istanbul</option>\n                                        <option id=\"Seattle\">Seattle</option>\n                                        <option id=\"Location not available\">Choose not to answer</option>\n                                        <option id=\"Other\">Other</option>\n                                    </select>\n                                </div>\n                                <div className=\"field\">\n                                    <textarea id=\"query\" className=\"input\" placeholder=\"Please describe the incident (mandatory)\" value={query} onChange={e => setQuery(e.target.value)} />\n                                </div>\n                                <div className=\"field\">\n                                    <input type=\"text\" id=\"realusername\" className=\"input\" placeholder=\"Enter your name if you wish to identify yourself (optional)\" value={realusername} onChange={e => setRealusername(e.target.value)} />\n                                </div>\n                                <div className=\"sendQueryBtnWrapper\">\n                                    <button className=\"sendQueryBtn\" disabled={!validateForm()}>Send!</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n          );\n    }\n\n  \n}\n\nexport default SendQuery;\n","import React, { useState } from 'react';\nimport { useSelector } from \"react-redux\";\n\nfunction QueryChatForm({userHash, queryresponse, addUserresponse}) {\n\n    const [query, setQuery] = useState(\"\");\n    const feedbacks = useSelector(state => state.feedbacks);\n\n    function validateForm() {\n        return query.length > 0;\n    }\n\n    function handleSubmit(event) {\n        event.preventDefault();\n\n        // Send the response to DB\n        var payload = {\n            \"userHash\": userHash,\n            \"queryId\": queryresponse.response.id,\n            \"response\": query\n        };\n\n        fetch('/responseToQuery', {\n            method: \"POST\",\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        }).then((response) => response.json()).then((result) => {\n                console.log(result)\n        });\n    }\n\n    return (\n        <div>\n            <div className=\"chatFormWrapper\">\n                        <form onSubmit={addUserresponse.bind(this, query, queryresponse.response.id, userHash)}>\n                            <div className=\"field\">\n                                <input id=\"query\" type=\"text\" className=\"input\" placeholder=\"Type your reply here!\" value={query} onChange={e => setQuery(e.target.value)} />\n                            </div>\n                            <div className=\"sendQueryChatBtnWrapper\">\n                                <button className=\"chatSendQueryBtn\" disabled={!validateForm()}></button>\n                            </div>\n                        </form>\n                    </div>\n        </div>\n    )\n}\n\nexport default QueryChatForm;\n","import React, { Component } from 'react'\n\nclass ChatResponse extends Component {\n\n    getStyleForChatWrapper = () =>{\n\n        if(this.props.response.user==='normal'){\n            return{\n                display: 'flex',\n                justifyContent: 'flex-end',\n                marginBottom: '10px'\n            }\n        }\n\n        else if(this.props.response.user==='admin'){\n            return{\n                display: 'flex',\n                marginBottom: '10px'\n            }\n        }\n    }\n\n    getStyleForChat = () =>{\n\n        if(this.props.response.user==='normal'){\n            return{\n                color: '#fff',\n                fontSize: '15px',\n                padding: '5px 10px',\n                backgroundColor: '#3c72a7',\n                borderRadius: '10px',\n                float: 'right',\n                display: 'flex',\n                flexDirection: 'column'\n            }\n        }\n\n        else if(this.props.response.user==='admin'){\n            return{\n                color: '#fff',\n                fontSize: '15px',\n                padding: '5px 10px',\n                backgroundColor: '#797979',\n                borderRadius: '10px',\n                float: 'left',\n                display: 'flex',\n                flexDirection: 'column'\n            }\n        }\n    }\n\n    render() {\n        console.log(this.props.response);\n\n        const  { response, time, date} = this.props.response;\n        return (\n            <div className=\"queryResponseWrapper\" style={this.getStyleForChatWrapper()}>\n                <div className=\"queryResponse\">\n        <p style={this.getStyleForChat()}>{response}<span className=\"chatDateTime\">{date} {time}</span></p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ChatResponse\n","import React, { Component } from 'react'\nimport ChatResponse from './ChatResponse';\n\nclass QueryChat extends Component {\n\n    render(){\n        // console.log(this.props.queryresponse.response.response);\n\n        return this.props.queryresponse.response.response.map((response) => (\n            <ChatResponse response={response} userHash={this.props.userHash}/>\n        ));\n    }\n}\n\nexport default QueryChat;\n","import React, { Component } from 'react'\nimport QueryChatForm from './QueryChatForm';\nimport QueryChat from './QueryChat';\n// import {addUserHash, getUserFeedbacks, isLoggedIn} from \"../actions\";\nimport {connect} from \"react-redux\";\nimport { Link } from 'react-router-dom';\n\nclass QueryChatWindow extends Component {\n    \n    queryresponse = {response: {response: [\n        {\n            \"user\": \"normal\",\n            \"response\": \"No chat found yet, please contact the admin\",\n            \"date\": \"\",\n            \"time\": \"\"\n        }\n    ]}};\n    render(){\n        if (this.props.location) {\n            if (this.props.location.queryresponse) {\n                this.queryresponse = this.props.location.queryresponse;\n            }\n        }\n\n        if (this.props.querylist.length > 0) {\n            let obj = this.props.querylist.find(o => o.id === this.props.selectedFeedback)\n            this.queryresponse.response = obj;\n        }\n\n        return (\n            <div>\n                <Link onClick={async () => {await this.props.logoutUser()}} className=\"logoutBtn\" to={{\n                    pathname:'/login'\n                }} >Log out!</Link>\n                <div className=\"chatScreenWrapper\">\n                    <div className=\"backBtnWrapper\">\n                    <Link className=\"backBtn\" to={{\n                    pathname:'/QueryListTable',\n                    queryresponse:{\n                        response: this.props.query\n                    },\n                    userHash: this.props.userHash\n                }} >Back</Link>\n                    </div>\n                \n                    <div className=\"queryChatWindow\">\n                        <QueryChat queryresponse={this.queryresponse}/>\n                    </div>\n                    <QueryChatForm userHash={this.props.userHash} queryresponse={this.queryresponse} addUserresponse={this.props.addUserresponse}/>\n                </div>\n            </div>\n\n        )\n    }\n    \n}\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedFeedback: state.selectedFeedback\n    }\n};\n\nconst mapDispatchToProps = () => {\n    return {\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps()\n)(QueryChatWindow);\n","import React from 'react'\n\nconst GetHash = (props) => {\n    return (\n        <div className=\"hashWrapper\">\n            <p>Your Hash is: <span className=\"hash\">{props.userHash}</span></p>\n        </div>\n    )\n}\n\nexport default GetHash\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router } from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\nimport {connect} from \"react-redux\";\nimport {addUserHash, isLoggedIn, getUserFeedbacks} from \"./actions\";\n\nimport Login from './components/Login';\nimport SendQuery from './components/SendQuery';\nimport QueryListTable from './components/QueryListTable';\nimport QueryChatWindow from './components/QueryChatWindow';\nimport GetHash from './components/GetHash';\nimport './App.css';\nimport {sha256} from \"js-sha256\";\n\nclass App extends Component {\n\n  state = {\n      loggedIn: false,\n      querylist: [],\n      userHash: \"\",\n      redirect: false\n  }\n\n    componentDidMount() {\n        // Call our fetch function below once the component mounts\n        // this.callBackendAPI()\n        //     .then(res => this.setState({querylist: res.data}))\n        //      .catch(err => console.log(err));\n    }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n        const response = await fetch('/getFeedbacks');\n        const body = await response.json();\n        console.log(body);\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    };\n\n  toggleImportant = (id) => {\n    this.setState({ querylist: this.state.querylist.map(\n      queryItem =>{\n        if(queryItem.id===id){\n          queryItem.important = !queryItem.important\n        }\n\n        if(queryItem.id===id && queryItem.impBtnValue==='important'){\n          queryItem.impBtnValue = 'unimportant'\n        }\n        else if(queryItem.id===id && queryItem.impBtnValue==='unimportant'){\n          queryItem.impBtnValue = 'important'\n        }\n        return queryItem;\n      }\n    ) })\n}\n\ntoggleRead = (id) => {\n  this.setState({ querylist: this.state.querylist.map(\n    queryItem =>{\n      if(queryItem.id===id){\n        queryItem.read = !queryItem.read\n      }\n\n      if(queryItem.id===id && queryItem.readBtnValue==='read'){\n        queryItem.readBtnValue = 'unread'\n      }\n      else if(queryItem.id===id && queryItem.readBtnValue==='unread'){\n        queryItem.readBtnValue = 'read'\n      }\n      return queryItem;\n    }\n  ) })\n}\n\n// This will fetch Query list on the basis of hash provided on login\nhandleLogin = async (email,password,event) => {\n\n    // Validation is not required here, so we just need to update the state\n    let userHash = sha256(email+password);\n\n    this.setState({userHash: userHash, loggedIn: true} );\n\n    // Now get user queries\n    var payload = {\n        \"userHash\": userHash\n    };\n\n    // Updating redux file\n    this.props.isLoggedIn();\n\n    // Query list is now updated\n    await fetch('/getUserFeedbacks', {\n        method: \"POST\",\n        headers: {\n            'Content-type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n    }).then(async (response) => response.json()).then(async (result) => {\n        await this.setState({querylist: result.data});\n        await this.props.getUserFeedbacks(result.data);\n        await this.props.addUserHash(userHash);\n    });\n\n    event.preventDefault();\n};\n\nhandleSendQuery = async (date,subject,query,location,realusername,event) => {\n    event.preventDefault();\n\n    // Sending new query to DB\n    var payload = {\n        \"incidentDate\": date, //incident date\n        \"subject\": subject,\n        \"query\": query,\n        \"userHash\": this.state.userHash,\n        \"location\": location,\n        \"userName\": realusername\n    };\n\n    await fetch('/putFeedbacks', {\n        method: \"POST\",\n        headers: {\n            'Content-type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n    }).then(async (response) => response.json()).then(async (result) => {\n        await this.setState({querylist: result.data, redirect: true})\n    });\n};\n\nlogoutUser = async () => {\n    await this.setState({loggedIn: false, querylist: []} );\n};\nredirectUser = async () => {\n  await this.setState({redirect: false} );\n};\naddUserresponse = async (response, queryId, userHash, event) => {\n    event.preventDefault();\n\n    // Send the response to DB\n    var payload = {\n        \"userHash\": userHash,\n        \"queryId\": queryId,\n        \"response\": response\n    };\n\n    fetch('/responseToQuery', {\n        method: \"POST\",\n        headers: {\n            'Content-type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n    }).then((response) => response.json()).then(async (result) => {\n        await this.setState({querylist: result.data})\n    });\n\n    // Now get user queries\n    // var payload = {\n    //     \"userHash\": this.state.userHash\n    // };\n    //\n    // // Query list is now updated\n    // await fetch('/getUserFeedbacks', {\n    //     method: \"POST\",\n    //     headers: {\n    //         'Content-type': 'application/json'\n    //     },\n    //     body: JSON.stringify(payload)\n    // }).then(async (response) => response.json()).then(async (result) => {\n    //     await this.setState({querylist: result.data})\n    // });\n};\n\n  render(){\n      return (\n          <Router>\n            <div className=\"App\">\n            <Route path=\"/\" exact component={ () => <Login loggedIn={this.state.loggedIn} handleLogin={this.handleLogin}/> }/>\n            <Route path=\"/login\" component={ () => <Login loggedIn={this.state.loggedIn} handleLogin={this.handleLogin}/> }/>\n            <Route path=\"/sendquery\" component={() => <SendQuery redirectUser={this.redirectUser} logoutUser={this.logoutUser} userHash={this.state.userHash} handleSendQuery={this.handleSendQuery} redirect={this.state.redirect}/>}/>\n            <Route path=\"/QueryListTable\" component={() => <QueryListTable logoutUser={this.logoutUser} querylist={this.state.querylist} userHash={this.state.userHash} toggleImportant={this.toggleImportant} toggleRead={this.toggleRead} />} />\n            <Route path=\"/queryChatWindow\" component={() => <QueryChatWindow logoutUser={this.logoutUser} userHash={this.state.userHash} querylist={this.state.querylist} addUserresponse={this.addUserresponse}/>}/>\n            <Route path=\"/gethash\" exact component={ () => <GetHash userHash={this.state.userHash}/> }/>\n          </div>\n          </Router>\n      );\n  }\n  \n}\n\nconst mapStateToProps = state => ({\n});\n\nconst mapDispatchToProps = () => {\n    return {\n        addUserHash,\n        isLoggedIn,\n        getUserFeedbacks\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps()\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const feedbackReducer = (state = [], action)=> {\n    switch (action.type) {\n        case 'GET_USER_FEEDBACK': {\n            return action.payload;\n        }\n        case 'UPDATE_USER_RESPONSE': {\n            return true;\n        }\n        case 'UPDATE_SELECTED_FEEDBACK': {\n            return true;\n        }\n        default:\n            return state;\n    }\n};\n\nexport default feedbackReducer;","const isLoggedReducer = (state = false, action)=> {\n    switch (action.type) {\n        case 'SIGN_IN':\n            return !state;\n        default:\n            return state;\n    }\n};\n\nexport default isLoggedReducer;","const selectedFeedbackReducer = (state = -1, action)=> {\n    switch (action.type) {\n        case 'SELECTED_FEEDBACK': {\n            return action.selectedFeedback;\n        }\n        default:\n            return -1;\n    }\n};\n\nexport default selectedFeedbackReducer;","const userHashReducer = (state = -2, action)=> {\n    switch (action.type) {\n        case 'ADD_USER_HASH':{\n            return action.userHash;\n        }\n        default:\n            return -2;\n    }\n};\n\nexport default userHashReducer;","import feedbackReducer from './feedbackReducer';\nimport loggedReducer from './isLoggedReducer';\nimport selectedFeedbackReducer from './selectedFeedbackReducer';\nimport userHashReducer from './userHashReducer';\nimport {combineReducers} from 'redux';\n\nconst allReducers = combineReducers({\n    feedbacks: feedbackReducer,\n    isLogged: loggedReducer,\n    currentUserHash: userHashReducer,\n    selectedFeedback: selectedFeedbackReducer,\n});\n\nexport default allReducers;","import { createStore } from \"redux\";\nimport allReducers from \"./reducers\";\n\nfunction saveToLocalStorage(state){\n    try{\n        const serializedState = JSON.stringify(state)\n        localStorage.setItem('state',serializedState)\n    } catch(e){\n        console.log(e)\n    }\n}\n\nfunction loadFromLocalStorage(state){\n    try{\n        const serializedState = localStorage.getItem(state)\n        if (serializedState === null) return undefined\n        return JSON.parse(serializedState)\n    } catch(e){\n        console.log(e)\n        return undefined\n    }\n}\n\nconst persistedState = loadFromLocalStorage();\n\nconst store = createStore(\n    allReducers,\n    persistedState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nstore.subscribe(() => saveToLocalStorage(store.getState()))\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n// const store = createStore(\n//     allReducers,\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n            <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}